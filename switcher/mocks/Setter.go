// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Setter is an autogenerated mock type for the Setter type
type Setter struct {
	mock.Mock
}

type Setter_Expecter struct {
	mock *mock.Mock
}

func (_m *Setter) EXPECT() *Setter_Expecter {
	return &Setter_Expecter{mock: &_m.Mock}
}

// GetLED provides a mock function with given fields:
func (_m *Setter) GetLED() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Setter_GetLED_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLED'
type Setter_GetLED_Call struct {
	*mock.Call
}

// GetLED is a helper method to define mock.On call
func (_e *Setter_Expecter) GetLED() *Setter_GetLED_Call {
	return &Setter_GetLED_Call{Call: _e.mock.On("GetLED")}
}

func (_c *Setter_GetLED_Call) Run(run func()) *Setter_GetLED_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Setter_GetLED_Call) Return(_a0 bool) *Setter_GetLED_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Setter_GetLED_Call) RunAndReturn(run func() bool) *Setter_GetLED_Call {
	_c.Call.Return(run)
	return _c
}

// SetLED provides a mock function with given fields: state
func (_m *Setter) SetLED(state bool) error {
	ret := _m.Called(state)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setter_SetLED_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLED'
type Setter_SetLED_Call struct {
	*mock.Call
}

// SetLED is a helper method to define mock.On call
//   - state bool
func (_e *Setter_Expecter) SetLED(state interface{}) *Setter_SetLED_Call {
	return &Setter_SetLED_Call{Call: _e.mock.On("SetLED", state)}
}

func (_c *Setter_SetLED_Call) Run(run func(state bool)) *Setter_SetLED_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Setter_SetLED_Call) Return(_a0 error) *Setter_SetLED_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Setter_SetLED_Call) RunAndReturn(run func(bool) error) *Setter_SetLED_Call {
	_c.Call.Return(run)
	return _c
}

// NewSetter creates a new instance of Setter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Setter {
	mock := &Setter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
